{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"solvency2-data","text":"<p>Package for reading the Solvency 2 Risk-Free Interest Rate Term Structures from the zip-files on the EIOPA website and deriving the term structures for alternative extrapolations.</p> <ul> <li>Free software: MIT/X license</li> <li>Documentation: https://solvency2-data.readthedocs.io.</li> </ul> <p></p>"},{"location":"index.html#features","title":"Features","text":"<p>Here is what the package does:</p> <ul> <li>Downloading and extracting the zip-files from the EIOPA website</li> <li>Store the financial data in a local database</li> <li>Reading the term structures from Excel-files into Pandas DataFrames</li> <li>Deriving term structures with other parameters for alternative     extrapolations</li> </ul>"},{"location":"index.html#contributors","title":"Contributors","text":"<ul> <li>Willem Jan Willemse https://github.com/wjwillemse</li> <li>Peter Davidson https://github.com/pdavidsonFIA</li> </ul>"},{"location":"api_docs.html","title":"API documentation","text":"<p>::: solvency2_data.rfr ::: solvency2_data.eiopa_data ::: solvency2_data.scraping ::: solvency2_data.sqlite_handler ::: solvency2_data.smith_wilson ::: solvency2_data.alternative_extrapolation ::: solvency2_data.util</p>"},{"location":"api_example.html","title":"Storing data in database","text":"<p>First generate a fresh database built using latest source code:</p> <pre><code>import logging\nimport sys\nlogging.basicConfig(format='%(asctime)s | %(levelname)s : %(message)s',\n                    level=logging.INFO, stream=sys.stdout)\n</code></pre> <pre><code># Check your environment\nprint(sys.path)\n</code></pre> <p>Create a database with:</p> <pre><code>from solvency2_data.eiopa_data import get_workspace\nfrom solvency2_data.sqlite_handler import EiopaDB\ndatabase = get_workspace()['database']\ndb = EiopaDB(database)\n</code></pre> <p>Reset the database with:</p> <pre><code># Hard reset of DB - deletes the file and all stored data and rebuilds empty DB\ndb.reset()\n</code></pre> <p>Now populate it for every month:</p> <pre><code>import solvency2_data\nsolvency2_data.refresh()\n</code></pre> <p>Now this can be indirectly queried using the API</p> <pre><code>import solvency2_data\nfrom datetime import date\nref_date = date(2020, 12, 31)\nrfr = solvency2_data.get(ref_date)\nmeta = solvency2_data.get(ref_date, 'meta')\nspr = solvency2_data.get(ref_date, 'spreads')\ngov = solvency2_data.get(ref_date, 'govies')\nsym_adj =  solvency2_data.get(ref_date, 'sym_adj')\nrfr.head()\n</code></pre> <p>Or directly queried via a SQL expression:</p> <pre><code>import pandas as pd\nsql = \"SELECT * FROM rfr\"\ndf = pd.read_sql(sql, con=db.conn)\ndf = df.loc[df.scenario=='base',['currency_code','ref_date', 'duration', 'spot']]\ndf.head()\n</code></pre> <pre><code>month_list = df.ref_date.drop_duplicates().to_list()\nmonth_list[:5]\n</code></pre> <pre><code>df['ref_date'] = df.ref_date.apply(lambda x: month_list.index(x))\ndf.head()\n</code></pre> <pre><code>eurs = df.loc[df.currency_code=='EUR', ['ref_date', 'duration', 'spot']].set_index('ref_date')\ngbps = df.loc[df.currency_code=='GBP', ['ref_date', 'duration', 'spot']].set_index('ref_date')\nchfs = df.loc[df.currency_code=='CHF', ['ref_date', 'duration', 'spot']].set_index('ref_date')\nusds = df.loc[df.currency_code=='USD', ['ref_date', 'duration', 'spot']].set_index('ref_date')\neurs.head()\n</code></pre> <pre><code>list(eurs.loc[66, 'spot'].values)[:5]\n</code></pre>"},{"location":"api_example.html#now-have-some-fun-p","title":"Now have some fun :p","text":"<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.animation import FuncAnimation\nimport matplotlib.animation as animation\nimport matplotlib.ticker as mtick\nfrom IPython.display import HTML\n\n# plt.style.use('ggplot')\nplt.xkcd()\n\nfig, ax = plt.subplots(figsize=(7, 4))\nax.set(xlim=(0, 100), ylim=(-0.01, 0.04))\n\ndate_text = ax.text(0.02, 0.9, '', transform=ax.transAxes)\n#plt.tight_layout()\nplt.gcf().subplots_adjust(bottom=0.15, left=0.15)\nplt.title('EIOPA Spots')\n\nx = list(range(1,151))\n#plt.xticks(ticks = x)\nplt.xlabel('duration (years)')\nplt.locator_params(axis='x', nbins=10)\n\npercentage = np.array(list(map(\"{:.1%}\".format, 0.005 * np.arange(-2, 10))))\nplt.yticks(ticks=0.005 * np.arange(-2, 10), labels=percentage)\nplt.ylabel('risk free spots')\n\ndate_text.set_text(month_list[0])\n\neur_start = ax.plot(x, eurs.loc[0,'spot'].values, color='b', ls='dashed', lw=2)[0]\neur_line = ax.plot(x, eurs.loc[0,'spot'].values, color='b', lw=2)[0]\n\ngbp_start = ax.plot(x, gbps.loc[0, 'spot'].values, color='y', ls='dashed', lw=2)[0]\ngbp_line = ax.plot(x, gbps.loc[0, 'spot'].values, color='y', lw=2)[0]\n\nchf_start = ax.plot(x, chfs.loc[0, 'spot'].values, color='m', ls='dashed', lw=2)[0]\nchf_line = ax.plot(x, chfs.loc[0, 'spot'].values, color='m', lw=2)[0]\n\nax.legend((eur_line, chf_line, gbp_line), ('eur', 'chf', 'gbp'), loc='lower right')\ndef animate(i):\n    key = min(i, 66)\n    date_text.set_text(month_list[key])\n    eur_line.set_ydata(list(eurs.loc[key, 'spot'].values))\n    gbp_line.set_ydata(list(gbps.loc[key, 'spot'].values))\n    chf_line.set_ydata(list(chfs.loc[key, 'spot'].values))\n\nanim = FuncAnimation(\n    fig, animate, interval=100, frames=67 + 15)\n\nplt.draw()\n#plt.show()\nHTML(anim.to_html5_video())\n</code></pre> <pre><code>\n</code></pre>"},{"location":"contributing.html","title":"Contributing","text":"<p>Help us to make this package better. All contributions are welcome and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing.html#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing.html#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/wjwillemse/solvency2-data/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in     troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing.html#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/wjwillemse/solvency2-data/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to     implement.</li> <li>Remember that this is a volunteer-driven project, and that     contributions are welcome :)</li> </ul>"},{"location":"contributing.html#development","title":"Development","text":"<p>Clone the package from Github and install with</p> <pre><code>poetry install --with dev\n</code></pre> <p>and set up pre-commit</p> <pre><code>pre-commit install\n</code></pre> <p>To run the tests:</p> <pre><code>python -m unittest \n</code></pre> <p>To check and format your changes:</p> <pre><code>ruff check .   # Lint all files in the current directory.\nruff format .  # Format all files in the current directory.\n</code></pre> <p>Run pre-commit</p> <pre><code>pre-commit run --all-files\n</code></pre> <p>Build the package</p> <pre><code>poetry build\n</code></pre>"},{"location":"history.html","title":"History","text":""},{"location":"history.html#0123-2023-9-20","title":"0.1.23 (2023-9-20)","text":"<ul> <li>Eiopa's 2023-6-1 uses PD_CoD instead pf PD_Cod</li> </ul>"},{"location":"history.html#0121-2023-3-29","title":"0.1.21 (2023-3-29)","text":"<ul> <li>Broken links from EIOPA website fixed</li> </ul>"},{"location":"history.html#0119-2022-2-17","title":"0.1.19 (2022-2-17)","text":"<ul> <li>Alternative extrapolation method from DNB implemented </li> </ul>"},{"location":"history.html#0118-2022-1-31","title":"0.1.18 (2022-1-31)","text":"<ul> <li>Smith-Wilson code added to package</li> </ul>"},{"location":"history.html#0116-2022-1-20","title":"0.1.16 (2022-1-20)","text":"<ul> <li>Major update with database object to store downloaded rfr\\'s </li> </ul>"},{"location":"history.html#0115-2021-1-29","title":"0.1.15 (2021-1-29)","text":"<ul> <li>Bug with pypi solved </li> </ul>"},{"location":"history.html#0114-2021-1-25","title":"0.1.14 (2021-1-25)","text":"<ul> <li>Bug nested module solved </li> </ul>"},{"location":"history.html#0113-2020-9-27","title":"0.1.13 (2020-9-27)","text":"<ul> <li>Code satisfies Flake8, solvency2_data.cfg added to pypi package </li> </ul>"},{"location":"history.html#0111-2020-9-26","title":"0.1.11 (2020-9-26)","text":"<ul> <li>Bug fixes </li> </ul>"},{"location":"history.html#018-2020-3-14","title":"0.1.8 (2020-3-14)","text":"<ul> <li>Configuration file added to specify data directories </li> </ul>"},{"location":"history.html#017-2020-2-23","title":"0.1.7 (2020-2-23)","text":"<ul> <li>Broken links from EIOPA website fixed </li> </ul>"},{"location":"history.html#015-2020-1-28","title":"0.1.5 (2020-1-28)","text":"<ul> <li>Spreads from PD_Cod Excel file added </li> </ul>"},{"location":"history.html#014-2019-11-28","title":"0.1.4 (2019-11-28)","text":"<ul> <li>Solvency 2 shocked curves added. </li> </ul>"},{"location":"history.html#013","title":"0.1.3","text":"<ul> <li>First working version. </li> </ul>"},{"location":"history.html#011-2019-11-6","title":"0.1.1 (2019-11-6)","text":"<ul> <li>First release on PyPI. </li> </ul>"},{"location":"history.html#010-2019-10-27","title":"0.1.0 (2019-10-27)","text":"<ul> <li>Development releases. </li> </ul>"},{"location":"installation.html","title":"Installation","text":""},{"location":"installation.html#stable-release","title":"Stable release","text":"<p>To install solvency2-data, run this command in your terminal:</p> <pre><code>pip install solvency2_data\n</code></pre> <p>This is the preferred method to install solvency2-data, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation.html#from-sources","title":"From sources","text":"<p>The sources for solvency2-data can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>git clone git://github.com/wjwillemse/solvency2_data\n</code></pre> <p>Or download the tarball:</p> <pre><code>curl -OJL https://github.com/wjwillemse/solvency2_data/tarball/master\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>python setup.py install\n</code></pre>"},{"location":"usage.html","title":"Usage","text":"<p>To use solvency2-data in a project:</p> <pre><code>import solvency2_data\n</code></pre> <p>After installation you can use the functions in the package in for example a Jupyter notebook.</p> <p>To get the term structures per 31/12/2017 enter</p> <pre><code>    d = solvency2_data.read(\"2017-12-31\")\n</code></pre> <p>If you don't add an input datetime string, i.e. solvency2_data.read(), then the function will use now() and you will receive the most recent published term structure.</p> <p>This returns a Python dictionary with all the information about the term structures. The dictionary has the following keys</p> <ul> <li>input_date: the original date by which the function was called is     stored in the dictionary as input_date</li> <li>reference_date: the proper reference date generated from the input     date. The reference date is the most recent end of the month prior     to the input date. So if for example the input is datetime(2018,     1, 1) then the reference date is \\'20171231\\', because this the most     recent end of the month prior to the input date. The reference date     is a string because it is used in the name of the files to be     downloaded from the EIOPA-website.</li> <li>url: the url of the term structures</li> <li>name_zipfile: the name of the zip-file</li> <li>name_excelfile: the name of the Excel-file contained in the     zip-file that was downloaded</li> <li>meta: the information per term structure contained in the     Excel-file: the Coupon frequency, the Last Liquid Point, the     Convergence period, the Ultimate Forward Rate, the alpha parameter     of the Smith-Wilson algorithm, the Credit Rate Adjustment and the     Volatility adjustment</li> <li>RFR_spot_no_VA: the term structures without Volatility adjustment     (a Pandas DataFrame)</li> <li>RFR_spot_with_VA: the term structures with Volatility adjustment     (a Pandas DataFrame)</li> </ul> <p>You can get the term structure without Volatility Adjustment for the Euro by</p> <pre><code>    rates = d['RFR_spot_no_VA']['Euro']\n</code></pre> <p>This returns a Pandas Series (convert it to a Numpy array to use it in calculations).</p> <p>The package also contains the Smith-Wilson algorithm that is used to derive the original term structures published by EIOPA. You can use this algorithm to derive term structures with alternative extrapolation by changing the parameters.</p> <p>For this you can do the following. First define the liquid maturities of the term structure, together with a Python dictionary of rates. Then use the smith_wilson function.</p> <pre><code>    liquid_maturities = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 20]\n   rates = d['RFR_spot_no_VA']['Euro']\n   ratesin = {num: float(rates[num]) for num in liquid_maturities}\n\n    alt_curve = smith_wilson(liquid_maturities = liquid_maturities,\n                             RatesIn = ratesin, \n                             nrofcoup = d['metadata'].loc[:, 'Euro'].Coupon_freq, \n                             cra = 0,\n                             ufr = 0,\n                             T2  = d['metadata'].loc[:, 'Euro'].LLP + \n                                   d['metadata'].loc[:, 'Euro'].Convergence)\n</code></pre> <p>In this case, we use a UFR of zero and a CRA of zero.</p>"},{"location":"usage.html#configuration-file","title":"Configuration file","text":"<p>The solvency2-data.cfg specifies the directories where the downloaded zip-files and the Excel files are stored. The .cfg file can be stored in the directory from where the code is run, otherwise the .cfg file in the package directory is used.</p>"}]}
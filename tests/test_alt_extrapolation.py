#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""Tests for alternative extrapolation"""

import solvency2_data
import pandas as pd
import unittest
from datetime import datetime
import pathlib


class TestAltExtra(unittest.TestCase):
    def test_1(self):
        assert solvency2_data.DiscountedValue4par2forwards(1, 2, 3, 4, 5) == (
            3.50016,
            -0.37503999999999993,
        )

    def test_2(self):
        assert solvency2_data.DiscountedValue4par2forwards(10, 20, 30, 40, 50) == (
            314.0,
            -0.375,
        )

    def test_3(self):
        assert solvency2_data.DiscountedValue4par2forwards(1, 0.01, 0.02, 0.03, 5) == (
            -0.9704579707187194,
            -0.04448945219269113,
        )

    def test_4(self):
        assert solvency2_data.DiscountedValue4par2forwards(
            19.408164389475854, 0.9130243814567768, 0.00422, 0, 5
        ) == (0.014191649629102854, -4.622916350630098)

    def test_5(self):
        assert solvency2_data.DiscountedValue4par2forwards(
            19.408164389475854, 0.9130243814567768, 0.00422, 0.003098358839788617, 5
        ) == (1.1003249270058468e-08, -4.538134856300949)

    def test_6(self):
        folder = pathlib.Path(__file__).parent.joinpath("test_data").as_posix()
        d = solvency2_data.read(str(datetime(2021, 12, 31).date()), path=folder)
        actual_swap = solvency2_data.create_swap_struct(
            rfr=d["RFR_spot_no_VA"]["Euro"],
            additional_swaps={25: 0.00522, 30: 0.00476, 40: 0.00400, 50: 0.00340},
        )
        expected_swap = pd.Series(
            index=[
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                25,
                30,
                40,
                50,
            ],
            data=[
                -0.00585,
                -0.00394624,
                -0.00245477,
                -0.00144549,
                -0.00083689,
                -0.00025882,
                0.00029833,
                0.00087393,
                0.00145754,
                0.00202904,
                0.00249068,
                0.00296985,
                0.00339847,
                0.0037291,
                0.00392453,
                0.00398574,
                0.00401794,
                0.0040783,
                0.00421415,
                0.00448139,
                0.00422,
                0.00376,
                0.003,
                0.0024,
            ],
            dtype="float64",
        )
        # self.assertEqual(actual_swap.values, expected_swap.values)
        # self.assertEqual(actual_swap.index, expected_swap.index)
        pd.testing.assert_series_equal(actual_swap, expected_swap)

    def test_7(self):
        folder = pathlib.Path(__file__).parent.joinpath("test_data").as_posix()
        d = solvency2_data.read(str(datetime(2021, 12, 31).date()), path=folder)
        actual_swap = solvency2_data.create_swap_struct(
            rfr=d["RFR_spot_no_VA"]["Euro"],
            additional_swaps={25: 0.00522, 30: 0.00476, 40: 0.00400, 50: 0.00340},
        )
        actual_forwards = solvency2_data.FromParToForwards(term_struct=actual_swap)
        expected_forwards = pd.Series(
            index=range(1, 121),
            data=[
                -0.00585,
                -0.00204637,
                0.00052669,
                0.00158614,
                0.00160373,
                0.00264505,
                0.00366659,
                0.00494943,
                0.00620254,
                0.00728514,
                0.00723214,
                0.00841583,
                0.00874508,
                0.0082205,
                0.00679419,
                0.00495043,
                0.00456012,
                0.00516055,
                0.00680334,
                0.00989486,
                0.00309836,
                0.00309836,
                0.00309836,
                0.00309836,
                0.00309836,
                0.00130144,
                0.00130144,
                0.00130144,
                0.00130144,
                0.00130144,
                0.00057508,
                0.00057508,
                0.00057508,
                0.00057508,
                0.00057508,
                0.00057508,
                0.00057508,
                0.00057508,
                0.00057508,
                0.00057508,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
                -0.00011927,
            ],
            dtype="float64",
        )
        # self.assertEqual(actual_forwards.values, expected_forwards.values)
        # self.assertEqual(actual_forwards.index, expected_forwards.index)
        pd.testing.assert_series_equal(actual_forwards, expected_forwards)

    def test_8(self):
        folder = pathlib.Path(__file__).parent.joinpath("test_data").as_posix()
        d = solvency2_data.read(str(datetime(2021, 12, 31).date()), path=folder)
        actual_swap = solvency2_data.create_swap_struct(
            rfr=d["RFR_spot_no_VA"]["Euro"],
            additional_swaps={25: 0.00522, 30: 0.00476, 40: 0.00400, 50: 0.00340},
        )
        actual_forwards = solvency2_data.FromParToForwards(term_struct=actual_swap)
        actual_term = solvency2_data.forwardstruct2termstruct(actual_forwards)
        expected_term = pd.Series(
            index=range(1, 121),
            data=[
                -0.00585,
                -0.00395,
                -0.00246,
                -0.00145,
                -0.00084,
                -0.00026,
                0.0003,
                0.00088,
                0.00147,
                0.00205,
                0.00252,
                0.00301,
                0.00345,
                0.00379,
                0.00399,
                0.00405,
                0.00408,
                0.00414,
                0.00428,
                0.00456,
                0.00449035,
                0.00442704,
                0.00436923,
                0.00431625,
                0.0042675,
                0.00415326,
                0.00404749,
                0.00394929,
                0.00385787,
                0.00377255,
                0.00366925,
                0.00357241,
                0.00348145,
                0.00339585,
                0.00331514,
                0.00323893,
                0.00316684,
                0.00309855,
                0.00303377,
                0.00297223,
                0.00289671,
                0.00282479,
                0.00275623,
                0.00269079,
                0.00262825,
                0.00256844,
                0.00251118,
                0.00245631,
                0.00240368,
                0.00235316,
                0.00230462,
                0.00225796,
                0.00221305,
                0.00216981,
                0.00212814,
                0.00208797,
                0.0020492,
                0.00201177,
                0.00197562,
                0.00194067,
                0.00190686,
                0.00187415,
                0.00184248,
                0.00181179,
                0.00178206,
                0.00175322,
                0.00172525,
                0.0016981,
                0.00167174,
                0.00164613,
                0.00162124,
                0.00159705,
                0.00157352,
                0.00155062,
                0.00152834,
                0.00150664,
                0.00148551,
                0.00146492,
                0.00144485,
                0.00142528,
                0.0014062,
                0.00138758,
                0.00136941,
                0.00135168,
                0.00133436,
                0.00131745,
                0.00130092,
                0.00128477,
                0.00126898,
                0.00125355,
                0.00123845,
                0.00122368,
                0.00120923,
                0.00119509,
                0.00118125,
                0.00116769,
                0.00115442,
                0.00114141,
                0.00112867,
                0.00111618,
                0.00110394,
                0.00109194,
                0.00108018,
                0.00106864,
                0.00105732,
                0.00104621,
                0.00103531,
                0.00102461,
                0.00101411,
                0.0010038,
                0.00099368,
                0.00098374,
                0.00097397,
                0.00096438,
                0.00095495,
                0.00094568,
                0.00093658,
                0.00092762,
                0.00091882,
                0.00091017,
            ],
            dtype="float64",
        )
        pd.testing.assert_series_equal(actual_term, expected_term)
